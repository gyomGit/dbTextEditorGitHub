/*
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbdtexteditor.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.csstudio.xtext.dbdtexteditor.ide.contentassist.antlr.internal.InternalDbdTextEditorParser;
import org.csstudio.xtext.dbdtexteditor.services.DbdTextEditorGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DbdTextEditorParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DbdTextEditorGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DbdTextEditorGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFieldattributeAccess().getAlternatives_2(), "rule__Fieldattribute__Alternatives_2");
			builder.put(grammarAccess.getMenunamesAccess().getAlternatives(), "rule__Menunames__Alternatives");
			builder.put(grammarAccess.getChoicenamesAccess().getAlternatives(), "rule__Choicenames__Alternatives");
			builder.put(grammarAccess.getRecordtypenamesAccess().getAlternatives(), "rule__Recordtypenames__Alternatives");
			builder.put(grammarAccess.getFieldnamesAccess().getAlternatives(), "rule__Fieldnames__Alternatives");
			builder.put(grammarAccess.getDbfnamesAccess().getAlternatives(), "rule__Dbfnames__Alternatives");
			builder.put(grammarAccess.getFieldattributenamesAccess().getAlternatives(), "rule__Fieldattributenames__Alternatives");
			builder.put(grammarAccess.getDbdModelAccess().getGroup(), "rule__DbdModel__Group__0");
			builder.put(grammarAccess.getMenuAccess().getGroup(), "rule__Menu__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
			builder.put(grammarAccess.getRecordtypeAccess().getGroup(), "rule__Recordtype__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getFieldattributeAccess().getGroup(), "rule__Fieldattribute__Group__0");
			builder.put(grammarAccess.getDbdModelAccess().getMenusAssignment_0(), "rule__DbdModel__MenusAssignment_0");
			builder.put(grammarAccess.getDbdModelAccess().getRecordtypesAssignment_1(), "rule__DbdModel__RecordtypesAssignment_1");
			builder.put(grammarAccess.getMenuAccess().getNameAssignment_0(), "rule__Menu__NameAssignment_0");
			builder.put(grammarAccess.getMenuAccess().getMenunameAssignment_2(), "rule__Menu__MenunameAssignment_2");
			builder.put(grammarAccess.getMenuAccess().getChoicesAssignment_5(), "rule__Menu__ChoicesAssignment_5");
			builder.put(grammarAccess.getChoiceAccess().getChoicenameAssignment_2(), "rule__Choice__ChoicenameAssignment_2");
			builder.put(grammarAccess.getChoiceAccess().getChoicestringAssignment_4(), "rule__Choice__ChoicestringAssignment_4");
			builder.put(grammarAccess.getRecordtypeAccess().getNameAssignment_0(), "rule__Recordtype__NameAssignment_0");
			builder.put(grammarAccess.getRecordtypeAccess().getRecordtypenameAssignment_2(), "rule__Recordtype__RecordtypenameAssignment_2");
			builder.put(grammarAccess.getRecordtypeAccess().getFieldsAssignment_5(), "rule__Recordtype__FieldsAssignment_5");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getFieldnameAssignment_2(), "rule__Field__FieldnameAssignment_2");
			builder.put(grammarAccess.getFieldAccess().getDbfAssignment_4(), "rule__Field__DbfAssignment_4");
			builder.put(grammarAccess.getFieldAccess().getFieldattributesAssignment_7(), "rule__Field__FieldattributesAssignment_7");
			builder.put(grammarAccess.getFieldattributeAccess().getFieldattributeAssignment_0(), "rule__Fieldattribute__FieldattributeAssignment_0");
			builder.put(grammarAccess.getFieldattributeAccess().getFieldattributestringAssignment_2_0(), "rule__Fieldattribute__FieldattributestringAssignment_2_0");
			builder.put(grammarAccess.getFieldattributeAccess().getFieldattributeintAssignment_2_1(), "rule__Fieldattribute__FieldattributeintAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DbdTextEditorGrammarAccess grammarAccess;

	@Override
	protected InternalDbdTextEditorParser createParser() {
		InternalDbdTextEditorParser result = new InternalDbdTextEditorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DbdTextEditorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DbdTextEditorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
