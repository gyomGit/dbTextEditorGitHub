/*
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbdtexteditor.formatting2

import com.google.inject.Inject
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Menu
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Recordtype
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.dbdModel
import org.csstudio.xtext.dbdtexteditor.services.DbdTextEditorGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class DbdTextEditorFormatter extends AbstractFormatter2 {

	@Inject extension DbdTextEditorGrammarAccess

	def dispatch void format(dbdModel dbdModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		val lastMenu = dbdModel.menus.last
		for (menu : dbdModel.menus) {
			menu.format
			if (menu === lastMenu)
				menu.append[setNewLines(1)]
			else
				menu.append[setNewLines(1)]
		}
		val lastRecordtype = dbdModel.recordtypes.last
		for (recordtype : dbdModel.recordtypes) {
			recordtype.format
			if (recordtype === lastRecordtype)
				recordtype.append[setNewLines(1)]
			else
				recordtype.append[setNewLines(1)]
		}
	}

	def dispatch void format(Menu menu, extension IFormattableDocument document) {

		val open = menu.regionFor.keyword(menuAccess.leftCurlyBracketKeyword_4)
		val close = menu.regionFor.keyword("}")
		open.append[newLine]
		interior(open, close)[indent]
		for (choice : menu.choices) {
			choice.append[newLine]
			choice.regionFor.keyword(",").append[oneSpace]

		}
	}

	def dispatch void format(Recordtype recordtype, extension IFormattableDocument document) {

		val open = recordtype.regionFor.keyword(recordtypeAccess.leftCurlyBracketKeyword_4)
		val close = recordtype.regionFor.keyword("}")
		open.append[newLine]
		interior(open, close)[indent]
		for (field : recordtype.fields) {
			field.append[newLine]
			field.regionFor.keyword(",").append[oneSpace]
			val open1 = field.regionFor.keyword(fieldAccess.leftCurlyBracketKeyword_6)
			val close1 = field.regionFor.keyword("}")
			open1.append[newLine]
			interior(open1, close1)[indent]
		for (fieldattribute : field.fieldattributes) {
				fieldattribute.append[newLine]
			}

		}
	}

}
