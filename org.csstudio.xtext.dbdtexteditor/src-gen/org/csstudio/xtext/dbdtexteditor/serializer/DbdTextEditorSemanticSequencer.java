/*
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbdtexteditor.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Choice;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.DbdTextEditorPackage;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Field;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Fieldattribute;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Menu;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Recordtype;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.dbdModel;
import org.csstudio.xtext.dbdtexteditor.services.DbdTextEditorGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DbdTextEditorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DbdTextEditorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DbdTextEditorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DbdTextEditorPackage.CHOICE:
				sequence_Choice(context, (Choice) semanticObject); 
				return; 
			case DbdTextEditorPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case DbdTextEditorPackage.FIELDATTRIBUTE:
				sequence_Fieldattribute(context, (Fieldattribute) semanticObject); 
				return; 
			case DbdTextEditorPackage.MENU:
				sequence_Menu(context, (Menu) semanticObject); 
				return; 
			case DbdTextEditorPackage.RECORDTYPE:
				sequence_Recordtype(context, (Recordtype) semanticObject); 
				return; 
			case DbdTextEditorPackage.DBD_MODEL:
				sequence_dbdModel(context, (dbdModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Choice returns Choice
	 *
	 * Constraint:
	 *     (choicename=Choicenames choicestring=STRING)
	 */
	protected void sequence_Choice(ISerializationContext context, Choice semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DbdTextEditorPackage.Literals.CHOICE__CHOICENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbdTextEditorPackage.Literals.CHOICE__CHOICENAME));
			if (transientValues.isValueTransient(semanticObject, DbdTextEditorPackage.Literals.CHOICE__CHOICESTRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbdTextEditorPackage.Literals.CHOICE__CHOICESTRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChoiceAccess().getChoicenameChoicenamesEnumRuleCall_2_0(), semanticObject.getChoicename());
		feeder.accept(grammarAccess.getChoiceAccess().getChoicestringSTRINGTerminalRuleCall_4_0(), semanticObject.getChoicestring());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name='field' fieldname=Fieldnames dbf=Dbfnames fieldattributes+=Fieldattribute*)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fieldattribute returns Fieldattribute
	 *
	 * Constraint:
	 *     (fieldattribute=Fieldattributenames (fieldattributestring=STRING | fieldattributeint=INT))
	 */
	protected void sequence_Fieldattribute(ISerializationContext context, Fieldattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Menu returns Menu
	 *
	 * Constraint:
	 *     (name='menu' menuname=Menunames choices+=Choice*)
	 */
	protected void sequence_Menu(ISerializationContext context, Menu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Recordtype returns Recordtype
	 *
	 * Constraint:
	 *     (name='recordtype' recordtypename=Recordtypenames fields+=Field*)
	 */
	protected void sequence_Recordtype(ISerializationContext context, Recordtype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     dbdModel returns dbdModel
	 *
	 * Constraint:
	 *     ((menus+=Menu+ recordtypes+=Recordtype+) | recordtypes+=Recordtype+)?
	 */
	protected void sequence_dbdModel(ISerializationContext context, dbdModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
