/**
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbdtexteditor.dbdTextEditor.impl;

import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Choice;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Choicenames;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.DbdTextEditorFactory;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.DbdTextEditorPackage;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Dbfnames;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Field;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Fieldattribute;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Fieldattributenames;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Fieldnames;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Menu;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Menunames;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Recordtype;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Recordtypenames;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.dbdModel;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DbdTextEditorPackageImpl extends EPackageImpl implements DbdTextEditorPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dbdModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass menuEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass choiceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass recordtypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fieldEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fieldattributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum menunamesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum choicenamesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum recordtypenamesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum fieldnamesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum dbfnamesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum fieldattributenamesEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.csstudio.xtext.dbdtexteditor.dbdTextEditor.DbdTextEditorPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private DbdTextEditorPackageImpl()
  {
    super(eNS_URI, DbdTextEditorFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link DbdTextEditorPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static DbdTextEditorPackage init()
  {
    if (isInited) return (DbdTextEditorPackage)EPackage.Registry.INSTANCE.getEPackage(DbdTextEditorPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredDbdTextEditorPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    DbdTextEditorPackageImpl theDbdTextEditorPackage = registeredDbdTextEditorPackage instanceof DbdTextEditorPackageImpl ? (DbdTextEditorPackageImpl)registeredDbdTextEditorPackage : new DbdTextEditorPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theDbdTextEditorPackage.createPackageContents();

    // Initialize created meta-data
    theDbdTextEditorPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theDbdTextEditorPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(DbdTextEditorPackage.eNS_URI, theDbdTextEditorPackage);
    return theDbdTextEditorPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getdbdModel()
  {
    return dbdModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getdbdModel_Menus()
  {
    return (EReference)dbdModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getdbdModel_Recordtypes()
  {
    return (EReference)dbdModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMenu()
  {
    return menuEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMenu_Name()
  {
    return (EAttribute)menuEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMenu_Menuname()
  {
    return (EAttribute)menuEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMenu_Choices()
  {
    return (EReference)menuEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getChoice()
  {
    return choiceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getChoice_Choicename()
  {
    return (EAttribute)choiceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getChoice_Choicestring()
  {
    return (EAttribute)choiceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRecordtype()
  {
    return recordtypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRecordtype_Name()
  {
    return (EAttribute)recordtypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRecordtype_Recordtypename()
  {
    return (EAttribute)recordtypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRecordtype_Fields()
  {
    return (EReference)recordtypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getField()
  {
    return fieldEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Name()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Fieldname()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Dbf()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getField_Fieldattributes()
  {
    return (EReference)fieldEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFieldattribute()
  {
    return fieldattributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFieldattribute_Fieldattribute()
  {
    return (EAttribute)fieldattributeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFieldattribute_Fieldattributestring()
  {
    return (EAttribute)fieldattributeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFieldattribute_Fieldattributeint()
  {
    return (EAttribute)fieldattributeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getMenunames()
  {
    return menunamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getChoicenames()
  {
    return choicenamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getRecordtypenames()
  {
    return recordtypenamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getFieldnames()
  {
    return fieldnamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getDbfnames()
  {
    return dbfnamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getFieldattributenames()
  {
    return fieldattributenamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DbdTextEditorFactory getDbdTextEditorFactory()
  {
    return (DbdTextEditorFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    dbdModelEClass = createEClass(DBD_MODEL);
    createEReference(dbdModelEClass, DBD_MODEL__MENUS);
    createEReference(dbdModelEClass, DBD_MODEL__RECORDTYPES);

    menuEClass = createEClass(MENU);
    createEAttribute(menuEClass, MENU__NAME);
    createEAttribute(menuEClass, MENU__MENUNAME);
    createEReference(menuEClass, MENU__CHOICES);

    choiceEClass = createEClass(CHOICE);
    createEAttribute(choiceEClass, CHOICE__CHOICENAME);
    createEAttribute(choiceEClass, CHOICE__CHOICESTRING);

    recordtypeEClass = createEClass(RECORDTYPE);
    createEAttribute(recordtypeEClass, RECORDTYPE__NAME);
    createEAttribute(recordtypeEClass, RECORDTYPE__RECORDTYPENAME);
    createEReference(recordtypeEClass, RECORDTYPE__FIELDS);

    fieldEClass = createEClass(FIELD);
    createEAttribute(fieldEClass, FIELD__NAME);
    createEAttribute(fieldEClass, FIELD__FIELDNAME);
    createEAttribute(fieldEClass, FIELD__DBF);
    createEReference(fieldEClass, FIELD__FIELDATTRIBUTES);

    fieldattributeEClass = createEClass(FIELDATTRIBUTE);
    createEAttribute(fieldattributeEClass, FIELDATTRIBUTE__FIELDATTRIBUTE);
    createEAttribute(fieldattributeEClass, FIELDATTRIBUTE__FIELDATTRIBUTESTRING);
    createEAttribute(fieldattributeEClass, FIELDATTRIBUTE__FIELDATTRIBUTEINT);

    // Create enums
    menunamesEEnum = createEEnum(MENUNAMES);
    choicenamesEEnum = createEEnum(CHOICENAMES);
    recordtypenamesEEnum = createEEnum(RECORDTYPENAMES);
    fieldnamesEEnum = createEEnum(FIELDNAMES);
    dbfnamesEEnum = createEEnum(DBFNAMES);
    fieldattributenamesEEnum = createEEnum(FIELDATTRIBUTENAMES);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(dbdModelEClass, dbdModel.class, "dbdModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getdbdModel_Menus(), this.getMenu(), null, "menus", null, 0, -1, dbdModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getdbdModel_Recordtypes(), this.getRecordtype(), null, "recordtypes", null, 0, -1, dbdModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(menuEClass, Menu.class, "Menu", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMenu_Name(), ecorePackage.getEString(), "name", null, 0, 1, Menu.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMenu_Menuname(), this.getMenunames(), "menuname", null, 0, 1, Menu.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMenu_Choices(), this.getChoice(), null, "choices", null, 0, -1, Menu.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(choiceEClass, Choice.class, "Choice", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getChoice_Choicename(), this.getChoicenames(), "choicename", null, 0, 1, Choice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getChoice_Choicestring(), ecorePackage.getEString(), "choicestring", null, 0, 1, Choice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(recordtypeEClass, Recordtype.class, "Recordtype", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRecordtype_Name(), ecorePackage.getEString(), "name", null, 0, 1, Recordtype.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRecordtype_Recordtypename(), this.getRecordtypenames(), "recordtypename", null, 0, 1, Recordtype.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRecordtype_Fields(), this.getField(), null, "fields", null, 0, -1, Recordtype.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fieldEClass, Field.class, "Field", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getField_Name(), ecorePackage.getEString(), "name", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getField_Fieldname(), this.getFieldnames(), "fieldname", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getField_Dbf(), this.getDbfnames(), "dbf", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getField_Fieldattributes(), this.getFieldattribute(), null, "fieldattributes", null, 0, -1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fieldattributeEClass, Fieldattribute.class, "Fieldattribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFieldattribute_Fieldattribute(), this.getFieldattributenames(), "fieldattribute", null, 0, 1, Fieldattribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFieldattribute_Fieldattributestring(), ecorePackage.getEString(), "fieldattributestring", null, 0, 1, Fieldattribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFieldattribute_Fieldattributeint(), ecorePackage.getEInt(), "fieldattributeint", null, 0, 1, Fieldattribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(menunamesEEnum, Menunames.class, "Menunames");
    addEEnumLiteral(menunamesEEnum, Menunames.SERIAL_PRTY);
    addEEnumLiteral(menunamesEEnum, Menunames.WAVEFORM_POST);
    addEEnumLiteral(menunamesEEnum, Menunames.AAO_POST);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_PRIORITY);
    addEEnumLiteral(menunamesEEnum, Menunames.SERIAL_SBIT);
    addEEnumLiteral(menunamesEEnum, Menunames.CALCOUT_DOPT);
    addEEnumLiteral(menunamesEEnum, Menunames.SDIS);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_OMSL);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_FTYPE);
    addEEnumLiteral(menunamesEEnum, Menunames.STRINGIN_POST);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_PINI);
    addEEnumLiteral(menunamesEEnum, Menunames.DFANOUT_SELM);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_SCAN);
    addEEnumLiteral(menunamesEEnum, Menunames.GPIB_ACMD);
    addEEnumLiteral(menunamesEEnum, Menunames.ASUB_LFLG);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_TMOD);
    addEEnumLiteral(menunamesEEnum, Menunames.SCALER_D1);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_POST);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_INTERFACE);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_ALARM_STAT);
    addEEnumLiteral(menunamesEEnum, Menunames.AO_OIF);
    addEEnumLiteral(menunamesEEnum, Menunames.BUFFERING_ALG);
    addEEnumLiteral(menunamesEEnum, Menunames.AAI_POST);
    addEEnumLiteral(menunamesEEnum, Menunames.EPID_FEEDBACK_STATE);
    addEEnumLiteral(menunamesEEnum, Menunames.CALCOUT_INAV);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_AUTOCONNECT);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_FMT);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_CONNECT);
    addEEnumLiteral(menunamesEEnum, Menunames.GPIB_UCMD);
    addEEnumLiteral(menunamesEEnum, Menunames.SERIAL_BAUD);
    addEEnumLiteral(menunamesEEnum, Menunames.HISTOGRAM_CMD);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_TRACE);
    addEEnumLiteral(menunamesEEnum, Menunames.SCALER_G1);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_EOMREASON);
    addEEnumLiteral(menunamesEEnum, Menunames.SCALER_CONT);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_IVOA);
    addEEnumLiteral(menunamesEEnum, Menunames.STRINGOUT_POST);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_ALARM_SEVR);
    addEEnumLiteral(menunamesEEnum, Menunames.SERIAL_MCTL);
    addEEnumLiteral(menunamesEEnum, Menunames.SERIAL_FCTL);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_SIMM);
    addEEnumLiteral(menunamesEEnum, Menunames.COMPRESS_ALG);
    addEEnumLiteral(menunamesEEnum, Menunames.ASUB_EFLG);
    addEEnumLiteral(menunamesEEnum, Menunames.FANOUT_SELM);
    addEEnumLiteral(menunamesEEnum, Menunames.CALCOUT_OOPT);
    addEEnumLiteral(menunamesEEnum, Menunames.ASYN_ENABLE);
    addEEnumLiteral(menunamesEEnum, Menunames.EPID_FEEDBACK_MODE);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_CONVERT);
    addEEnumLiteral(menunamesEEnum, Menunames.SCALER_CNT);
    addEEnumLiteral(menunamesEEnum, Menunames.SERIAL_IX);
    addEEnumLiteral(menunamesEEnum, Menunames.MENU_YES_NO);
    addEEnumLiteral(menunamesEEnum, Menunames.TIMESTAMP_TST);
    addEEnumLiteral(menunamesEEnum, Menunames.SERIAL_DBIT);
    addEEnumLiteral(menunamesEEnum, Menunames.SEL_SELM);

    initEEnum(choicenamesEEnum, Choicenames.class, "Choicenames");
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_PRTY_UNKNOWN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_PRTY_NONE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_PRTY_EVEN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_PRTY_ODD);
    addEEnumLiteral(choicenamesEEnum, Choicenames.WAVEFORM_POST_ALWAYS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.WAVEFORM_POST_ON_CHANGE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.AAO_POST_ALWAYS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.AAO_POST_ON_CHANGE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PRIORITY_LOW);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PRIORITY_MEDIUM);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PRIORITY_HIGH);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_SBIT_UNKNOWN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_SBIT_1);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_SBIT_2);
    addEEnumLiteral(choicenamesEEnum, Choicenames.CALCOUT_DOPT_USE_VAL);
    addEEnumLiteral(choicenamesEEnum, Choicenames.CALCOUT_DOPT_USE_OVAL);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_OMSLSUPERVISORY);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_OMSLCLOSED_LOOP);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_STRING);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_CHAR);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_UCHAR);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_SHORT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_USHORT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_LONG);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_ULONG);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_INT64);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_UINT64);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_FLOAT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_DOUBLE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_FTYPE_ENUM);
    addEEnumLiteral(choicenamesEEnum, Choicenames.STRINGIN_POST_ON_CHANGE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.STRINGIN_POST_ALWAYS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PINI_NO);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PINI_YES);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PINI_RUN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PINI_RUNNING);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PINI_PAUSE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_PINI_PAUSED);
    addEEnumLiteral(choicenamesEEnum, Choicenames.DFANOUT_SELM_ALL);
    addEEnumLiteral(choicenamesEEnum, Choicenames.DFANOUT_SELM_SPECIFIED);
    addEEnumLiteral(choicenamesEEnum, Choicenames.DFANOUT_SELM_MASK);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN_PASSIVE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN_EVENT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN_IOINTR);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN10_SECOND);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN5_SECOND);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN2_SECOND);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN1_SECOND);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN_5SECOND);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN_2SECOND);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_SCAN_1SECOND);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_ACMD_NONE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_ACMD_GROUP_EXECUTE_TRIG_GET_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_ACMD_GO_TO_LOCAL_GTL_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_ACMD_SELECTED_DEV_CLEAR_SDC_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_ACMD_TAKE_CONTROL_TCT_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_ACMD_SERIAL_POLL);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASUB_LFLG_IGNORE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASUB_LFLG_READ);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_TMOD_WRITE_READ);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_TMOD_WRITE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_TMOD_READ);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_TMOD_FLUSH);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_TMOD_NO_IO);
    addEEnumLiteral(choicenamesEEnum, Choicenames.IP_DRTO_UNKNOWN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.IP_DRTO_NO);
    addEEnumLiteral(choicenamesEEnum, Choicenames.IP_DRTO_YES);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SCALER_D1_UP);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SCALER_D1_DN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_POST_ON_CHANGE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_POST_ALWAYS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_INTERFACE_OCTET);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_INTERFACE_INT32);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_INTERFACE_UINT32);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_INTERFACE_FLOAT64);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_NO_ALARM);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_READ);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_WRITE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_HIHI);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_HIGH);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_LOLO);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_LOW);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_STATE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_COS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_COMM);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_TIMEOUT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_HWLIMIT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_CALC);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_SCAN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_LINK);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_SOFT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_BAD_SUB);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_UDF);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_DISABLE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_SIMM);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_READ_ACCESS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.MENU_ALARM_STAT_WRITE_ACCESS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.AO_OIF_FULL);
    addEEnumLiteral(choicenamesEEnum, Choicenames.AO_OIF_INCREMENTAL);
    addEEnumLiteral(choicenamesEEnum, Choicenames.BUFFERING_ALG_FIFO);
    addEEnumLiteral(choicenamesEEnum, Choicenames.BUFFERING_ALG_LIFO);
    addEEnumLiteral(choicenamesEEnum, Choicenames.AAI_POST_ALWAYS);
    addEEnumLiteral(choicenamesEEnum, Choicenames.AAI_POST_ON_CHANGE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.EPID_FEEDBACK_STATE_OFF);
    addEEnumLiteral(choicenamesEEnum, Choicenames.EPID_FEEDBACK_STATE_ON);
    addEEnumLiteral(choicenamesEEnum, Choicenames.CALCOUT_INAV_EXT_NC);
    addEEnumLiteral(choicenamesEEnum, Choicenames.CALCOUT_INAV_EXT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.CALCOUT_INAV_LOC);
    addEEnumLiteral(choicenamesEEnum, Choicenames.CALCOUT_INAV_CON);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_AUTOCONNECT_NO_AUTO_CONNECT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_AUTOCONNECT_AUTO_CONNECT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_FMT_ASCII);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_FMT_HYBRID);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_FMT_BINARY);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SEQ_SELM_ALL);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SEQ_SELM_SPECIFIED);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SEQ_SELM_MASK);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_CONNECT_DISCONNECT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_CONNECT_CONNECT);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_UCMD_NONE);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_UCMD_DEVICE_CLEAR_DCL_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_UCMD_LOCAL_LOCKOUT_LL0_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_UCMD_SERIAL_POLL_DISABLE_SPD_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_UCMD_SERIAL_POLL_ENABLE_SPE_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_UCMD_UNLISTEN_UNL_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.GPIB_UCMD_UNTALK_UNT_);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_UNKNOWN);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_300);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_600);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_1200);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_2400);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_4800);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_9600);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_19200);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_38400);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_57600);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_115200);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_230400);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_460800);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_576000);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_921600);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SERIAL_BAUD_1152000);
    addEEnumLiteral(choicenamesEEnum, Choicenames.HISTOGRAM_CMD_READ);
    addEEnumLiteral(choicenamesEEnum, Choicenames.HISTOGRAM_CMD_CLEAR);
    addEEnumLiteral(choicenamesEEnum, Choicenames.HISTOGRAM_CMD_START);
    addEEnumLiteral(choicenamesEEnum, Choicenames.HISTOGRAM_CMD_STOP);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_TRACE_OFF);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_TRACE_ON);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SCALER_G1_N);
    addEEnumLiteral(choicenamesEEnum, Choicenames.SCALER_G1_Y);
    addEEnumLiteral(choicenamesEEnum, Choicenames.ASYN_EOMREASON_NONE);

    initEEnum(recordtypenamesEEnum, Recordtypenames.class, "Recordtypenames");
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.CALCOUT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.STATE);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.HISTOGRAM);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.LSI);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.INT64OUT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.SEQ);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.STRINGOUT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.AAI);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.PERMISSIVE);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.BO);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.DFANOUT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.MBBI);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.EVENT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.COMPRESS);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.MBBO);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.EPID);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.AO);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.AAO);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.MBBI_DIRECT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.ASYN);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.WAVEFORM);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.SCALER);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.TIMESTAMP);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.FANOUT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.LONGIN);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.PRINTF);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.SEL);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.BI);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.LSO);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.SUB_ARRAY);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.CALC);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.MBBO_DIRECT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.LONGOUT);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.ASUB);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.SUB);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.INT64IN);
    addEEnumLiteral(recordtypenamesEEnum, Recordtypenames.AI);

    initEEnum(fieldnamesEEnum, Fieldnames.class, "Fieldnames");
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NAME);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DESC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ASG);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SCAN);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PINI);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PHAS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EVNT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TSE);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TSEL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DTYP);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DISV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DISA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SDIS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.MLOK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.MLIS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.BKLNK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DISP);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PROC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.STAT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SEVR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NSTA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NSEV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ACKS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ACKT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DISS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PACT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PUTF);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.RPRO);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ASP);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PPN);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PPNR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SPVT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.RSET);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DSET);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DPVT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.RDES);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LSET);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PRIO);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TPRO);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.BKPT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.UDF);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.UDFS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TIME);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FLNK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.RPVT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.VAL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PVAL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.CALC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.CLCV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPB);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPD);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPE);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPF);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPG);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPH);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPI);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPJ);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OUT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INAV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INBV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INCV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INDV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INEV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INFV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INGV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INHV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INIV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INJV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INKV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INLV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OOPT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DLYA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DOPT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OCAL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OCLV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OEVT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EPVT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.IVOA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.IVOV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PREC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HOPR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LOPR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HIHI);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LOLO);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HIGH);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LOW);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HHSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LLSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HYST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ADEL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.MDEL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.A);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.B);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.C);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.D);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.E);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.F);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.G);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.H);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.I);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.J);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.K);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.L);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OVAL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LB);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LD);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LE);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LF);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LG);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LH);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LI);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LJ);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.POVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LALM);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ALST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.MLST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.RPCL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ORPC);

    initEEnum(dbfnamesEEnum, Dbfnames.class, "Dbfnames");
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_STRING);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_MENU);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_INLINK);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_FWDLINK);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_SHORT);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_DEVICE);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_NOACCESS);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_UCHAR);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_OUTLINK);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_USHORT);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_DOUBLE);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.DBF_ULONG);
    addEEnumLiteral(dbfnamesEEnum, Dbfnames.INT64);

    initEEnum(fieldattributenamesEEnum, Fieldattributenames.class, "Fieldattributenames");
    addEEnumLiteral(fieldattributenamesEEnum, Fieldattributenames.SIZE);
    addEEnumLiteral(fieldattributenamesEEnum, Fieldattributenames.PROMPT);
    addEEnumLiteral(fieldattributenamesEEnum, Fieldattributenames.PROMPTGROUP);
    addEEnumLiteral(fieldattributenamesEEnum, Fieldattributenames.MENU);
    addEEnumLiteral(fieldattributenamesEEnum, Fieldattributenames.INTEREST);

    // Create resource
    createResource(eNS_URI);
  }

} //DbdTextEditorPackageImpl
