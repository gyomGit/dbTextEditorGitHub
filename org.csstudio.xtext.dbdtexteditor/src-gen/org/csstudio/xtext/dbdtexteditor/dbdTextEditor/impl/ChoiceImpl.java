/**
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbdtexteditor.dbdTextEditor.impl;

import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Choice;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Choicenames;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.DbdTextEditorPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Choice</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.csstudio.xtext.dbdtexteditor.dbdTextEditor.impl.ChoiceImpl#getChoicename <em>Choicename</em>}</li>
 *   <li>{@link org.csstudio.xtext.dbdtexteditor.dbdTextEditor.impl.ChoiceImpl#getChoicestring <em>Choicestring</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChoiceImpl extends MinimalEObjectImpl.Container implements Choice
{
  /**
   * The default value of the '{@link #getChoicename() <em>Choicename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoicename()
   * @generated
   * @ordered
   */
  protected static final Choicenames CHOICENAME_EDEFAULT = Choicenames.SERIAL_PRTY_UNKNOWN;

  /**
   * The cached value of the '{@link #getChoicename() <em>Choicename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoicename()
   * @generated
   * @ordered
   */
  protected Choicenames choicename = CHOICENAME_EDEFAULT;

  /**
   * The default value of the '{@link #getChoicestring() <em>Choicestring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoicestring()
   * @generated
   * @ordered
   */
  protected static final String CHOICESTRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getChoicestring() <em>Choicestring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoicestring()
   * @generated
   * @ordered
   */
  protected String choicestring = CHOICESTRING_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChoiceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DbdTextEditorPackage.Literals.CHOICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Choicenames getChoicename()
  {
    return choicename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChoicename(Choicenames newChoicename)
  {
    Choicenames oldChoicename = choicename;
    choicename = newChoicename == null ? CHOICENAME_EDEFAULT : newChoicename;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DbdTextEditorPackage.CHOICE__CHOICENAME, oldChoicename, choicename));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getChoicestring()
  {
    return choicestring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChoicestring(String newChoicestring)
  {
    String oldChoicestring = choicestring;
    choicestring = newChoicestring;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DbdTextEditorPackage.CHOICE__CHOICESTRING, oldChoicestring, choicestring));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DbdTextEditorPackage.CHOICE__CHOICENAME:
        return getChoicename();
      case DbdTextEditorPackage.CHOICE__CHOICESTRING:
        return getChoicestring();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DbdTextEditorPackage.CHOICE__CHOICENAME:
        setChoicename((Choicenames)newValue);
        return;
      case DbdTextEditorPackage.CHOICE__CHOICESTRING:
        setChoicestring((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DbdTextEditorPackage.CHOICE__CHOICENAME:
        setChoicename(CHOICENAME_EDEFAULT);
        return;
      case DbdTextEditorPackage.CHOICE__CHOICESTRING:
        setChoicestring(CHOICESTRING_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DbdTextEditorPackage.CHOICE__CHOICENAME:
        return choicename != CHOICENAME_EDEFAULT;
      case DbdTextEditorPackage.CHOICE__CHOICESTRING:
        return CHOICESTRING_EDEFAULT == null ? choicestring != null : !CHOICESTRING_EDEFAULT.equals(choicestring);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (choicename: ");
    result.append(choicename);
    result.append(", choicestring: ");
    result.append(choicestring);
    result.append(')');
    return result.toString();
  }

} //ChoiceImpl
