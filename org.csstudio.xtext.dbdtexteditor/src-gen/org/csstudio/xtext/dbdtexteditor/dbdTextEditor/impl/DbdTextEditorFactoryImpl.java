/**
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbdtexteditor.dbdTextEditor.impl;

import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DbdTextEditorFactoryImpl extends EFactoryImpl implements DbdTextEditorFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DbdTextEditorFactory init()
  {
    try
    {
      DbdTextEditorFactory theDbdTextEditorFactory = (DbdTextEditorFactory)EPackage.Registry.INSTANCE.getEFactory(DbdTextEditorPackage.eNS_URI);
      if (theDbdTextEditorFactory != null)
      {
        return theDbdTextEditorFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DbdTextEditorFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DbdTextEditorFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DbdTextEditorPackage.DBD_MODEL: return createdbdModel();
      case DbdTextEditorPackage.MENU: return createMenu();
      case DbdTextEditorPackage.CHOICE: return createChoice();
      case DbdTextEditorPackage.RECORDTYPE: return createRecordtype();
      case DbdTextEditorPackage.FIELD: return createField();
      case DbdTextEditorPackage.FIELDATTRIBUTE: return createFieldattribute();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DbdTextEditorPackage.MENUNAMES:
        return createMenunamesFromString(eDataType, initialValue);
      case DbdTextEditorPackage.CHOICENAMES:
        return createChoicenamesFromString(eDataType, initialValue);
      case DbdTextEditorPackage.RECORDTYPENAMES:
        return createRecordtypenamesFromString(eDataType, initialValue);
      case DbdTextEditorPackage.FIELDNAMES:
        return createFieldnamesFromString(eDataType, initialValue);
      case DbdTextEditorPackage.DBFNAMES:
        return createDbfnamesFromString(eDataType, initialValue);
      case DbdTextEditorPackage.FIELDATTRIBUTENAMES:
        return createFieldattributenamesFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DbdTextEditorPackage.MENUNAMES:
        return convertMenunamesToString(eDataType, instanceValue);
      case DbdTextEditorPackage.CHOICENAMES:
        return convertChoicenamesToString(eDataType, instanceValue);
      case DbdTextEditorPackage.RECORDTYPENAMES:
        return convertRecordtypenamesToString(eDataType, instanceValue);
      case DbdTextEditorPackage.FIELDNAMES:
        return convertFieldnamesToString(eDataType, instanceValue);
      case DbdTextEditorPackage.DBFNAMES:
        return convertDbfnamesToString(eDataType, instanceValue);
      case DbdTextEditorPackage.FIELDATTRIBUTENAMES:
        return convertFieldattributenamesToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dbdModel createdbdModel()
  {
    dbdModelImpl dbdModel = new dbdModelImpl();
    return dbdModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Menu createMenu()
  {
    MenuImpl menu = new MenuImpl();
    return menu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Choice createChoice()
  {
    ChoiceImpl choice = new ChoiceImpl();
    return choice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Recordtype createRecordtype()
  {
    RecordtypeImpl recordtype = new RecordtypeImpl();
    return recordtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fieldattribute createFieldattribute()
  {
    FieldattributeImpl fieldattribute = new FieldattributeImpl();
    return fieldattribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Menunames createMenunamesFromString(EDataType eDataType, String initialValue)
  {
    Menunames result = Menunames.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMenunamesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Choicenames createChoicenamesFromString(EDataType eDataType, String initialValue)
  {
    Choicenames result = Choicenames.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertChoicenamesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Recordtypenames createRecordtypenamesFromString(EDataType eDataType, String initialValue)
  {
    Recordtypenames result = Recordtypenames.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRecordtypenamesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fieldnames createFieldnamesFromString(EDataType eDataType, String initialValue)
  {
    Fieldnames result = Fieldnames.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFieldnamesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dbfnames createDbfnamesFromString(EDataType eDataType, String initialValue)
  {
    Dbfnames result = Dbfnames.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDbfnamesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fieldattributenames createFieldattributenamesFromString(EDataType eDataType, String initialValue)
  {
    Fieldattributenames result = Fieldattributenames.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFieldattributenamesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DbdTextEditorPackage getDbdTextEditorPackage()
  {
    return (DbdTextEditorPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DbdTextEditorPackage getPackage()
  {
    return DbdTextEditorPackage.eINSTANCE;
  }

} //DbdTextEditorFactoryImpl
