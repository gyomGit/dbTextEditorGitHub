/**
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbdtexteditor.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Choice;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Field;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Fieldattribute;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Menu;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.Recordtype;
import org.csstudio.xtext.dbdtexteditor.dbdTextEditor.dbdModel;
import org.csstudio.xtext.dbdtexteditor.services.DbdTextEditorGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DbdTextEditorFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DbdTextEditorGrammarAccess _dbdTextEditorGrammarAccess;
  
  protected void _format(final dbdModel dbdModel, @Extension final IFormattableDocument document) {
    final Menu lastMenu = IterableExtensions.<Menu>last(dbdModel.getMenus());
    EList<Menu> _menus = dbdModel.getMenus();
    for (final Menu menu : _menus) {
      {
        document.<Menu>format(menu);
        if ((menu == lastMenu)) {
          final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<Menu>append(menu, _function);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<Menu>append(menu, _function_1);
        }
      }
    }
    final Recordtype lastRecordtype = IterableExtensions.<Recordtype>last(dbdModel.getRecordtypes());
    EList<Recordtype> _recordtypes = dbdModel.getRecordtypes();
    for (final Recordtype recordtype : _recordtypes) {
      {
        document.<Recordtype>format(recordtype);
        if ((recordtype == lastRecordtype)) {
          final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<Recordtype>append(recordtype, _function);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<Recordtype>append(recordtype, _function_1);
        }
      }
    }
  }
  
  protected void _format(final Menu menu, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(menu).keyword(this._dbdTextEditorGrammarAccess.getMenuAccess().getLeftCurlyBracketKeyword_4());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(menu).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<Choice> _choices = menu.getChoices();
    for (final Choice choice : _choices) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Choice>append(choice, _function_2);
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.append(this.textRegionExtensions.regionFor(choice).keyword(","), _function_3);
      }
    }
  }
  
  protected void _format(final Recordtype recordtype, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(recordtype).keyword(this._dbdTextEditorGrammarAccess.getRecordtypeAccess().getLeftCurlyBracketKeyword_4());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(recordtype).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<Field> _fields = recordtype.getFields();
    for (final Field field : _fields) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Field>append(field, _function_2);
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.append(this.textRegionExtensions.regionFor(field).keyword(","), _function_3);
        final ISemanticRegion open1 = this.textRegionExtensions.regionFor(field).keyword(this._dbdTextEditorGrammarAccess.getFieldAccess().getLeftCurlyBracketKeyword_6());
        final ISemanticRegion close1 = this.textRegionExtensions.regionFor(field).keyword("}");
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(open1, _function_4);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<ISemanticRegion, ISemanticRegion>interior(open1, close1, _function_5);
        EList<Fieldattribute> _fieldattributes = field.getFieldattributes();
        for (final Fieldattribute fieldattribute : _fieldattributes) {
          final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
            it.newLine();
          };
          document.<Fieldattribute>append(fieldattribute, _function_6);
        }
      }
    }
  }
  
  public void format(final Object menu, final IFormattableDocument document) {
    if (menu instanceof XtextResource) {
      _format((XtextResource)menu, document);
      return;
    } else if (menu instanceof Menu) {
      _format((Menu)menu, document);
      return;
    } else if (menu instanceof Recordtype) {
      _format((Recordtype)menu, document);
      return;
    } else if (menu instanceof dbdModel) {
      _format((dbdModel)menu, document);
      return;
    } else if (menu instanceof EObject) {
      _format((EObject)menu, document);
      return;
    } else if (menu == null) {
      _format((Void)null, document);
      return;
    } else if (menu != null) {
      _format(menu, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(menu, document).toString());
    }
  }
}
