/**
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbtexteditor.dbTextEditor.impl;

import org.csstudio.xtext.dbtexteditor.dbTextEditor.DbTextEditorFactory;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.DbTextEditorPackage;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Field;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Fieldnames;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Info;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Record;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Recordnames;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.dbModel;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DbTextEditorPackageImpl extends EPackageImpl implements DbTextEditorPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dbModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass recordEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fieldEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass infoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum fieldnamesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum recordnamesEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.csstudio.xtext.dbtexteditor.dbTextEditor.DbTextEditorPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private DbTextEditorPackageImpl()
  {
    super(eNS_URI, DbTextEditorFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link DbTextEditorPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static DbTextEditorPackage init()
  {
    if (isInited) return (DbTextEditorPackage)EPackage.Registry.INSTANCE.getEPackage(DbTextEditorPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredDbTextEditorPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    DbTextEditorPackageImpl theDbTextEditorPackage = registeredDbTextEditorPackage instanceof DbTextEditorPackageImpl ? (DbTextEditorPackageImpl)registeredDbTextEditorPackage : new DbTextEditorPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theDbTextEditorPackage.createPackageContents();

    // Initialize created meta-data
    theDbTextEditorPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theDbTextEditorPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(DbTextEditorPackage.eNS_URI, theDbTextEditorPackage);
    return theDbTextEditorPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getdbModel()
  {
    return dbModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getdbModel_Records()
  {
    return (EReference)dbModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRecord()
  {
    return recordEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRecord_Name()
  {
    return (EAttribute)recordEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRecord_Recordname()
  {
    return (EAttribute)recordEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRecord_RecordLink()
  {
    return (EAttribute)recordEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRecord_Infosfields()
  {
    return (EReference)recordEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getField()
  {
    return fieldEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Name()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Fieldname()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Fieldstring()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Fieldint()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getField_Fielddouble()
  {
    return (EAttribute)fieldEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInfo()
  {
    return infoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInfo_Name()
  {
    return (EAttribute)infoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInfo_InfoValue()
  {
    return (EAttribute)infoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getFieldnames()
  {
    return fieldnamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getRecordnames()
  {
    return recordnamesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DbTextEditorFactory getDbTextEditorFactory()
  {
    return (DbTextEditorFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    dbModelEClass = createEClass(DB_MODEL);
    createEReference(dbModelEClass, DB_MODEL__RECORDS);

    recordEClass = createEClass(RECORD);
    createEAttribute(recordEClass, RECORD__NAME);
    createEAttribute(recordEClass, RECORD__RECORDNAME);
    createEAttribute(recordEClass, RECORD__RECORD_LINK);
    createEReference(recordEClass, RECORD__INFOSFIELDS);

    fieldEClass = createEClass(FIELD);
    createEAttribute(fieldEClass, FIELD__NAME);
    createEAttribute(fieldEClass, FIELD__FIELDNAME);
    createEAttribute(fieldEClass, FIELD__FIELDSTRING);
    createEAttribute(fieldEClass, FIELD__FIELDINT);
    createEAttribute(fieldEClass, FIELD__FIELDDOUBLE);

    infoEClass = createEClass(INFO);
    createEAttribute(infoEClass, INFO__NAME);
    createEAttribute(infoEClass, INFO__INFO_VALUE);

    // Create enums
    fieldnamesEEnum = createEEnum(FIELDNAMES);
    recordnamesEEnum = createEEnum(RECORDNAMES);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(dbModelEClass, dbModel.class, "dbModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getdbModel_Records(), this.getRecord(), null, "records", null, 0, -1, dbModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(recordEClass, Record.class, "Record", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRecord_Name(), ecorePackage.getEString(), "name", null, 0, 1, Record.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRecord_Recordname(), this.getRecordnames(), "recordname", null, 0, 1, Record.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRecord_RecordLink(), ecorePackage.getEString(), "recordLink", null, 0, 1, Record.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRecord_Infosfields(), ecorePackage.getEObject(), null, "infosfields", null, 0, -1, Record.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fieldEClass, Field.class, "Field", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getField_Name(), ecorePackage.getEString(), "name", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getField_Fieldname(), this.getFieldnames(), "fieldname", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getField_Fieldstring(), ecorePackage.getEString(), "fieldstring", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getField_Fieldint(), ecorePackage.getEInt(), "fieldint", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getField_Fielddouble(), ecorePackage.getEString(), "fielddouble", null, 0, 1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(infoEClass, Info.class, "Info", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInfo_Name(), ecorePackage.getEString(), "name", null, 0, 1, Info.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInfo_InfoValue(), ecorePackage.getEString(), "infoValue", null, 0, 1, Info.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(fieldnamesEEnum, Fieldnames.class, "Fieldnames");
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NAME);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DESC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ASG);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SCAN);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PHAS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PINI);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SDIS);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PROC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PACT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SEVR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.STAT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TIME);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DTYP);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ONAM);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.OUT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SIML);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ZNAM);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ZSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INP);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EGU);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LINR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EGUL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EGUF);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HIGH);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HIHI);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HHSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EIST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EISV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.EIVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ELST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ELSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ELVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FRST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FRSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FRVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FVST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HYST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LLSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FVSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FVVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.MASK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NIST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NISV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NIVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.NOBT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ONST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ONSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ONVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SHFT);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SVST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SVSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SVVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SXST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SXSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SXVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TEST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TESV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TEVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.THST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.THSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.THVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TWST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TWSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TWVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.UNSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ZRST);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ZRSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.ZRVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LOLO);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LOW);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LSV);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SSCN);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.TSE);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.PREC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DRVH);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.LOPR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.DRVL);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.HOPR);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.CALC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPB);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPD);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.FLNK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPE);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPF);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPG);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPH);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPI);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPJ);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INPK);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INAA);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INBB);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.INCC);
    addEEnumLiteral(fieldnamesEEnum, Fieldnames.SIOL);

    initEEnum(recordnamesEEnum, Recordnames.class, "Recordnames");
    addEEnumLiteral(recordnamesEEnum, Recordnames.AI);
    addEEnumLiteral(recordnamesEEnum, Recordnames.AO);
    addEEnumLiteral(recordnamesEEnum, Recordnames.LONGIN);
    addEEnumLiteral(recordnamesEEnum, Recordnames.LONGOUT);
    addEEnumLiteral(recordnamesEEnum, Recordnames.STRINGIN);
    addEEnumLiteral(recordnamesEEnum, Recordnames.STRINGOUT);
    addEEnumLiteral(recordnamesEEnum, Recordnames.LSI);
    addEEnumLiteral(recordnamesEEnum, Recordnames.LSO);
    addEEnumLiteral(recordnamesEEnum, Recordnames.WAVEFORM);
    addEEnumLiteral(recordnamesEEnum, Recordnames.BI);
    addEEnumLiteral(recordnamesEEnum, Recordnames.BO);
    addEEnumLiteral(recordnamesEEnum, Recordnames.MBBI);
    addEEnumLiteral(recordnamesEEnum, Recordnames.MBBO);
    addEEnumLiteral(recordnamesEEnum, Recordnames.MBBI_DIRECT);
    addEEnumLiteral(recordnamesEEnum, Recordnames.MBBO_DIRECT);
    addEEnumLiteral(recordnamesEEnum, Recordnames.CALCOUT);
    addEEnumLiteral(recordnamesEEnum, Recordnames.SCALCOUT);
    addEEnumLiteral(recordnamesEEnum, Recordnames.CALC);

    // Create resource
    createResource(eNS_URI);
  }

} //DbTextEditorPackageImpl
