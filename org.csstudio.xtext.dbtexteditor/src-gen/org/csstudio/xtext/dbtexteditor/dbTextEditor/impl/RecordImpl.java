/**
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbtexteditor.dbTextEditor.impl;

import java.util.Collection;

import org.csstudio.xtext.dbtexteditor.dbTextEditor.DbTextEditorPackage;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Record;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Recordnames;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Record</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.csstudio.xtext.dbtexteditor.dbTextEditor.impl.RecordImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.csstudio.xtext.dbtexteditor.dbTextEditor.impl.RecordImpl#getRecordname <em>Recordname</em>}</li>
 *   <li>{@link org.csstudio.xtext.dbtexteditor.dbTextEditor.impl.RecordImpl#getRecordLink <em>Record Link</em>}</li>
 *   <li>{@link org.csstudio.xtext.dbtexteditor.dbTextEditor.impl.RecordImpl#getInfosfields <em>Infosfields</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RecordImpl extends MinimalEObjectImpl.Container implements Record
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getRecordname() <em>Recordname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecordname()
   * @generated
   * @ordered
   */
  protected static final Recordnames RECORDNAME_EDEFAULT = Recordnames.AI;

  /**
   * The cached value of the '{@link #getRecordname() <em>Recordname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecordname()
   * @generated
   * @ordered
   */
  protected Recordnames recordname = RECORDNAME_EDEFAULT;

  /**
   * The default value of the '{@link #getRecordLink() <em>Record Link</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecordLink()
   * @generated
   * @ordered
   */
  protected static final String RECORD_LINK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRecordLink() <em>Record Link</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecordLink()
   * @generated
   * @ordered
   */
  protected String recordLink = RECORD_LINK_EDEFAULT;

  /**
   * The cached value of the '{@link #getInfosfields() <em>Infosfields</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInfosfields()
   * @generated
   * @ordered
   */
  protected EList<EObject> infosfields;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecordImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DbTextEditorPackage.Literals.RECORD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DbTextEditorPackage.RECORD__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Recordnames getRecordname()
  {
    return recordname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecordname(Recordnames newRecordname)
  {
    Recordnames oldRecordname = recordname;
    recordname = newRecordname == null ? RECORDNAME_EDEFAULT : newRecordname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DbTextEditorPackage.RECORD__RECORDNAME, oldRecordname, recordname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRecordLink()
  {
    return recordLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecordLink(String newRecordLink)
  {
    String oldRecordLink = recordLink;
    recordLink = newRecordLink;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DbTextEditorPackage.RECORD__RECORD_LINK, oldRecordLink, recordLink));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EObject> getInfosfields()
  {
    if (infosfields == null)
    {
      infosfields = new EObjectContainmentEList<EObject>(EObject.class, this, DbTextEditorPackage.RECORD__INFOSFIELDS);
    }
    return infosfields;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DbTextEditorPackage.RECORD__INFOSFIELDS:
        return ((InternalEList<?>)getInfosfields()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DbTextEditorPackage.RECORD__NAME:
        return getName();
      case DbTextEditorPackage.RECORD__RECORDNAME:
        return getRecordname();
      case DbTextEditorPackage.RECORD__RECORD_LINK:
        return getRecordLink();
      case DbTextEditorPackage.RECORD__INFOSFIELDS:
        return getInfosfields();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DbTextEditorPackage.RECORD__NAME:
        setName((String)newValue);
        return;
      case DbTextEditorPackage.RECORD__RECORDNAME:
        setRecordname((Recordnames)newValue);
        return;
      case DbTextEditorPackage.RECORD__RECORD_LINK:
        setRecordLink((String)newValue);
        return;
      case DbTextEditorPackage.RECORD__INFOSFIELDS:
        getInfosfields().clear();
        getInfosfields().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DbTextEditorPackage.RECORD__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DbTextEditorPackage.RECORD__RECORDNAME:
        setRecordname(RECORDNAME_EDEFAULT);
        return;
      case DbTextEditorPackage.RECORD__RECORD_LINK:
        setRecordLink(RECORD_LINK_EDEFAULT);
        return;
      case DbTextEditorPackage.RECORD__INFOSFIELDS:
        getInfosfields().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DbTextEditorPackage.RECORD__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DbTextEditorPackage.RECORD__RECORDNAME:
        return recordname != RECORDNAME_EDEFAULT;
      case DbTextEditorPackage.RECORD__RECORD_LINK:
        return RECORD_LINK_EDEFAULT == null ? recordLink != null : !RECORD_LINK_EDEFAULT.equals(recordLink);
      case DbTextEditorPackage.RECORD__INFOSFIELDS:
        return infosfields != null && !infosfields.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", recordname: ");
    result.append(recordname);
    result.append(", recordLink: ");
    result.append(recordLink);
    result.append(')');
    return result.toString();
  }

} //RecordImpl
