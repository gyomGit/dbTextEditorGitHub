/*
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbtexteditor.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.DbTextEditorPackage;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Field;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Info;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Record;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.dbModel;
import org.csstudio.xtext.dbtexteditor.services.DbTextEditorGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DbTextEditorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DbTextEditorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DbTextEditorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DbTextEditorPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case DbTextEditorPackage.INFO:
				sequence_Info(context, (Info) semanticObject); 
				return; 
			case DbTextEditorPackage.RECORD:
				sequence_Record(context, (Record) semanticObject); 
				return; 
			case DbTextEditorPackage.DB_MODEL:
				sequence_dbModel(context, (dbModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name='field' fieldname=Fieldnames (fieldstring=STRING | fieldint=INT))
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Info returns Info
	 *
	 * Constraint:
	 *     (name='asyn:READBACK' infoValue=STRING)
	 */
	protected void sequence_Info(ISerializationContext context, Info semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DbTextEditorPackage.Literals.INFO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbTextEditorPackage.Literals.INFO__NAME));
			if (transientValues.isValueTransient(semanticObject, DbTextEditorPackage.Literals.INFO__INFO_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbTextEditorPackage.Literals.INFO__INFO_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInfoAccess().getNameAsynREADBACKKeyword_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInfoAccess().getInfoValueSTRINGTerminalRuleCall_4_0(), semanticObject.getInfoValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Record returns Record
	 *
	 * Constraint:
	 *     (name='record' recordname=Recordnames recordLink=STRING (infosfields+=Info | infosfields+=Field)*)
	 */
	protected void sequence_Record(ISerializationContext context, Record semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     dbModel returns dbModel
	 *
	 * Constraint:
	 *     records+=Record+
	 */
	protected void sequence_dbModel(ISerializationContext context, dbModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
