/**
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbtexteditor.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Record;
import org.csstudio.xtext.dbtexteditor.dbTextEditor.dbModel;
import org.csstudio.xtext.dbtexteditor.services.DbTextEditorGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DbTextEditorFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DbTextEditorGrammarAccess _dbTextEditorGrammarAccess;
  
  protected void _format(final dbModel dbModel, @Extension final IFormattableDocument document) {
    final Record lastRecord = IterableExtensions.<Record>last(dbModel.getRecords());
    EList<Record> _records = dbModel.getRecords();
    for (final Record record : _records) {
      {
        document.<Record>format(record);
        if ((record == lastRecord)) {
          final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<Record>append(record, _function);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<Record>append(record, _function_1);
        }
      }
    }
  }
  
  protected void _format(final Record record, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(record).keyword(","), _function);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(record).keyword(this._dbTextEditorGrammarAccess.getRecordAccess().getLeftCurlyBracketKeyword_6());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(record).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
    EList<EObject> _infosfields = record.getInfosfields();
    for (final EObject infofield : _infosfields) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<EObject>append(infofield, _function_3);
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.append(this.textRegionExtensions.regionFor(infofield).keyword(","), _function_4);
      }
    }
  }
  
  public void format(final Object record, final IFormattableDocument document) {
    if (record instanceof XtextResource) {
      _format((XtextResource)record, document);
      return;
    } else if (record instanceof Record) {
      _format((Record)record, document);
      return;
    } else if (record instanceof dbModel) {
      _format((dbModel)record, document);
      return;
    } else if (record instanceof EObject) {
      _format((EObject)record, document);
      return;
    } else if (record == null) {
      _format((Void)null, document);
      return;
    } else if (record != null) {
      _format(record, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(record, document).toString());
    }
  }
}
