/*
 * generated by Xtext 2.15.0
 */
package org.csstudio.xtext.dbtexteditor.formatting2

import com.google.inject.Inject
import org.csstudio.xtext.dbtexteditor.dbTextEditor.Record
import org.csstudio.xtext.dbtexteditor.dbTextEditor.dbModel
import org.csstudio.xtext.dbtexteditor.services.DbTextEditorGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class DbTextEditorFormatter extends AbstractFormatter2 {
	
	@Inject extension DbTextEditorGrammarAccess

	def dispatch void format(dbModel dbModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		val lastRecord = dbModel.records.last
		for (record : dbModel.records) {
			record.format
			if (record === lastRecord) 
				record.append[setNewLines(1)]
			else
				record.append[setNewLines(1)]
		}
	}
	def dispatch void format(Record record, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		record.regionFor.keyword(",").append[oneSpace]
		val open = record.regionFor.keyword(recordAccess.leftCurlyBracketKeyword_6)
		val close = record.regionFor.keyword("}")
		open.append[newLine]
		interior(open, close)[indent]
		for (infofield : record.infosfields) {
			infofield.append[newLine]
			infofield.regionFor.keyword(",").append[oneSpace]
		}
	}
}	
	// TODO: implement for 

